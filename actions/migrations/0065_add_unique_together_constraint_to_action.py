# Generated by Django 3.1.2 on 2021-01-14 14:57

from django.db import migrations, models
from django.db.models import Count
from uuid import uuid4


def fix_duplicates(apps, schema_editor):
    Action = apps.get_model('actions', 'Action')
    # Get all (plan, identifier) pairs of actions that violate unique_together
    # constraints.
    # The `order_by()` is necessary because otherwise Django for some reason
    # adds the columns `created_at` and `order` to the GROUP BY part of the
    # resulting SQL query.
    violations = (Action.objects
                  .values('plan', 'identifier')
                  .order_by()
                  .annotate(count=Count('identifier'))
                  .filter(count__gt=1))
    for violation in violations:
        # Only keep 'plan' and 'identifier'
        del violation['count']
        # Append a number to each identifier involved in a violation
        i = 1
        for action in Action.objects.filter(**violation):
            new_identifier = f'{action.identifier} ({i})'
            if Action.objects.filter(plan=violation['plan'], identifier=new_identifier).exists():
                # The new identifier exists already as well for this plan, so
                # append UUID instead
                uuid = uuid4()
                new_identifier = f'{action.identifier} ({uuid})'
            action.identifier = new_identifier
            action.save()
            i += 1


class Migration(migrations.Migration):

    dependencies = [
        ('actions', '0064_add_action_implementation_phase'),
    ]

    operations = [
        migrations.RunPython(fix_duplicates),
        migrations.AlterUniqueTogether(
            name='action',
            unique_together={('plan', 'identifier')},
        ),
    ]
