# Generated by Django 3.1.5 on 2021-09-28 21:37

import actions.models
import aplans.utils
import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import modelcluster.fields
import modeltrans.fields
import wagtail.core.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='order')),
                ('name', models.CharField(max_length=1000, verbose_name='name')),
                ('official_name', models.TextField(blank=True, help_text='The name as approved by an official party', null=True, verbose_name='official name')),
                ('identifier', aplans.utils.IdentifierField(help_text='The identifier for this action (e.g. number)', max_length=50, validators=[aplans.utils.IdentifierValidator()], verbose_name='identifier')),
                ('lead_paragraph', models.TextField(blank=True, verbose_name='Lead paragraph')),
                ('description', wagtail.core.fields.RichTextField(blank=True, help_text='What does this action involve in more detail?', null=True, verbose_name='description')),
                ('internal_priority', models.PositiveIntegerField(blank=True, null=True, verbose_name='internal priority')),
                ('internal_admin_notes', models.TextField(blank=True, null=True, verbose_name='internal notes for plan administrators')),
                ('internal_notes', models.TextField(blank=True, null=True, verbose_name='internal notes')),
                ('manual_status', models.BooleanField(default=False, help_text='Set if you want to prevent the action status from being determined automatically', verbose_name='override status manually')),
                ('manual_status_reason', models.TextField(blank=True, help_text='Describe the reason why this action has has this status', null=True, verbose_name='specifier for status')),
                ('completion', models.PositiveIntegerField(blank=True, editable=False, help_text='The completion percentage for this action', null=True, verbose_name='completion')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='updated at')),
                ('start_date', models.DateField(blank=True, help_text='The date when implementation of this action starts', null=True, verbose_name='start date')),
                ('end_date', models.DateField(blank=True, help_text='The date when implementation of this action ends', null=True, verbose_name='end date')),
                ('i18n', modeltrans.fields.TranslationField(fields=('name', 'official_name', 'description'), required_languages=(), virtual_fields=True)),
            ],
            options={
                'verbose_name': 'action',
                'verbose_name_plural': 'actions',
                'ordering': ('plan', 'order'),
                'permissions': (('admin_action', 'Can administrate all actions'),),
            },
            bases=(models.Model, aplans.utils.PlanRelatedModel),
        ),
        migrations.CreateModel(
            name='ActionContactPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='order')),
                ('primary_contact', models.BooleanField(default=False, help_text='Is this person the primary contact person for the action?', verbose_name='primary contact person')),
            ],
            options={
                'verbose_name': 'action contact person',
                'verbose_name_plural': 'action contact persons',
                'ordering': ['action', 'order'],
            },
        ),
        migrations.CreateModel(
            name='ActionDecisionLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('identifier', aplans.utils.IdentifierField(max_length=50, validators=[aplans.utils.IdentifierValidator()], verbose_name='identifier')),
                ('i18n', modeltrans.fields.TranslationField(fields=('name',), required_languages=(), virtual_fields=True)),
            ],
            bases=(models.Model, aplans.utils.PlanRelatedModel),
        ),
        migrations.CreateModel(
            name='ActionImpact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='order')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('identifier', aplans.utils.IdentifierField(max_length=50, validators=[aplans.utils.IdentifierValidator()], verbose_name='identifier')),
                ('i18n', modeltrans.fields.TranslationField(fields=('name',), required_languages=(), virtual_fields=True)),
            ],
            options={
                'verbose_name': 'action impact class',
                'verbose_name_plural': 'action impact classes',
                'ordering': ('plan', 'order'),
            },
            bases=(models.Model, aplans.utils.PlanRelatedModel),
        ),
        migrations.CreateModel(
            name='ActionImplementationPhase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='order')),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('identifier', aplans.utils.IdentifierField(max_length=20, validators=[aplans.utils.IdentifierValidator()], verbose_name='identifier')),
                ('i18n', modeltrans.fields.TranslationField(fields=('name',), required_languages=(), virtual_fields=True)),
            ],
            options={
                'verbose_name': 'action implementation phase',
                'verbose_name_plural': 'action implementation phases',
                'ordering': ('plan', 'order'),
            },
            bases=(models.Model, aplans.utils.PlanRelatedModel),
        ),
        migrations.CreateModel(
            name='ActionLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='order')),
                ('url', models.URLField(max_length=400, validators=[django.core.validators.URLValidator(('http', 'https'))], verbose_name='URL')),
                ('title', models.CharField(blank=True, max_length=254, verbose_name='title')),
            ],
            options={
                'verbose_name': 'action link',
                'verbose_name_plural': 'action links',
                'ordering': ['action', 'order'],
            },
        ),
        migrations.CreateModel(
            name='ActionResponsibleParty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='order')),
            ],
            options={
                'verbose_name': 'action responsible party',
                'verbose_name_plural': 'action responsible parties',
                'ordering': ['action', 'order'],
            },
        ),
        migrations.CreateModel(
            name='ActionSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('begins_at', models.DateField()),
                ('ends_at', models.DateField(blank=True, null=True)),
                ('i18n', modeltrans.fields.TranslationField(fields=('name',), required_languages=(), virtual_fields=True)),
            ],
            options={
                'verbose_name': 'action schedule',
                'verbose_name_plural': 'action schedules',
                'ordering': ('plan', 'begins_at'),
            },
            bases=(models.Model, aplans.utils.PlanRelatedModel),
        ),
        migrations.CreateModel(
            name='ActionStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('identifier', aplans.utils.IdentifierField(max_length=20, validators=[aplans.utils.IdentifierValidator()], verbose_name='identifier')),
                ('is_completed', models.BooleanField(default=False, verbose_name='is completed')),
                ('i18n', modeltrans.fields.TranslationField(fields=('name',), required_languages=(), virtual_fields=True)),
            ],
            options={
                'verbose_name': 'action status',
                'verbose_name_plural': 'action statuses',
            },
            bases=(models.Model, aplans.utils.PlanRelatedModel),
        ),
        migrations.CreateModel(
            name='ActionStatusUpdate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('date', models.DateField(default=datetime.date.today, verbose_name='date')),
                ('content', models.TextField(verbose_name='content')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='created at')),
                ('modified_at', models.DateField(auto_now=True, verbose_name='created at')),
            ],
            options={
                'verbose_name': 'action status update',
                'verbose_name_plural': 'action status updates',
                'ordering': ('-date',),
            },
        ),
        migrations.CreateModel(
            name='ActionTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='name')),
                ('state', models.CharField(choices=[('not_started', 'not started'), ('in_progress', 'in progress'), ('completed', 'completed'), ('cancelled', 'cancelled')], default='not_started', max_length=20, verbose_name='state')),
                ('comment', wagtail.core.fields.RichTextField(blank=True, null=True, verbose_name='comment')),
                ('due_at', models.DateField(help_text='The date by which the task should be completed (deadline)', verbose_name='due date')),
                ('completed_at', models.DateField(blank=True, help_text='The date when the task was completed', null=True, verbose_name='completion date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='modified at')),
            ],
            options={
                'verbose_name': 'action task',
                'verbose_name_plural': 'action tasks',
                'ordering': ('action', '-due_at'),
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='order')),
                ('identifier', aplans.utils.IdentifierField(max_length=50, validators=[aplans.utils.IdentifierValidator()], verbose_name='identifier')),
                ('external_identifier', models.CharField(blank=True, editable=False, max_length=50, null=True)),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('short_description', models.TextField(blank=True, max_length=200, verbose_name='short description')),
                ('color', models.CharField(blank=True, help_text='Set if the category has a theme color', max_length=50, null=True, validators=[actions.models.validate_css_color], verbose_name='theme color')),
                ('i18n', modeltrans.fields.TranslationField(fields=('name', 'short_description'), required_languages=(), virtual_fields=True)),
            ],
            options={
                'verbose_name': 'category',
                'verbose_name_plural': 'categories',
                'ordering': ('type', 'order'),
            },
            bases=(models.Model, aplans.utils.PlanRelatedModel),
        ),
        migrations.CreateModel(
            name='CategoryLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='order')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('name_plural', models.CharField(blank=True, max_length=100, null=True, verbose_name='plural name')),
                ('i18n', modeltrans.fields.TranslationField(fields=('name',), required_languages=(), virtual_fields=True)),
            ],
            options={
                'verbose_name': 'category level',
                'verbose_name_plural': 'category levels',
                'ordering': ('type', 'order'),
            },
        ),
        migrations.CreateModel(
            name='CategoryMetadataChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='CategoryMetadataNumericValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='CategoryMetadataRichText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', wagtail.core.fields.RichTextField(verbose_name='Text')),
            ],
        ),
        migrations.CreateModel(
            name='CategoryType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='name')),
                ('identifier', aplans.utils.IdentifierField(max_length=50, validators=[aplans.utils.IdentifierValidator()], verbose_name='identifier')),
                ('usable_for_actions', models.BooleanField(default=False, verbose_name='usable for action categorization')),
                ('usable_for_indicators', models.BooleanField(default=False, verbose_name='usable for indicator categorization')),
                ('editable_for_actions', models.BooleanField(default=False, verbose_name='editable for actions')),
                ('editable_for_indicators', models.BooleanField(default=False, verbose_name='editable for indicators')),
                ('hide_category_identifiers', models.BooleanField(default=False, help_text='Set if the categories do not have meaningful identifiers', verbose_name='hide category identifiers')),
            ],
            options={
                'verbose_name': 'category type',
                'verbose_name_plural': 'category types',
                'ordering': ('plan', 'name'),
            },
            bases=(models.Model, aplans.utils.PlanRelatedModel),
        ),
        migrations.CreateModel(
            name='CategoryTypeMetadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='order')),
                ('identifier', aplans.utils.IdentifierField(max_length=50, validators=[aplans.utils.IdentifierValidator()], verbose_name='identifier')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('format', models.CharField(choices=[('ordered_choice', 'Ordered choice'), ('rich_text', 'Rich text'), ('numeric', 'Numeric')], max_length=50, verbose_name='Format')),
            ],
            options={
                'verbose_name': 'category metadata',
                'verbose_name_plural': 'category metadatas',
            },
        ),
        migrations.CreateModel(
            name='CategoryTypeMetadataChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='order')),
                ('identifier', aplans.utils.IdentifierField(max_length=50, validators=[aplans.utils.IdentifierValidator()], verbose_name='identifier')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
            ],
            options={
                'verbose_name': 'category type metadata choice',
                'verbose_name_plural': 'category type metadata choices',
                'ordering': ('metadata', 'order'),
            },
        ),
        migrations.CreateModel(
            name='ImpactGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('identifier', aplans.utils.IdentifierField(max_length=50, validators=[aplans.utils.IdentifierValidator()], verbose_name='identifier')),
                ('weight', models.FloatField(blank=True, null=True, verbose_name='weight')),
                ('color', models.CharField(blank=True, max_length=16, null=True, validators=[actions.models.validate_css_color], verbose_name='color')),
                ('i18n', modeltrans.fields.TranslationField(fields=('name',), required_languages=(), virtual_fields=True)),
            ],
            options={
                'verbose_name': 'impact group',
                'verbose_name_plural': 'impact groups',
                'ordering': ('plan', '-weight'),
            },
            bases=(models.Model, aplans.utils.PlanRelatedModel),
        ),
        migrations.CreateModel(
            name='ImpactGroupAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'impact group action',
                'verbose_name_plural': 'impact group actions',
            },
        ),
        migrations.CreateModel(
            name='MonitoringQualityPoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='order')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description_yes', models.CharField(max_length=200, verbose_name='description when action fulfills criteria')),
                ('description_no', models.CharField(max_length=200, verbose_name="description when action doesn't fulfill criteria")),
                ('identifier', aplans.utils.IdentifierField(max_length=50, validators=[aplans.utils.IdentifierValidator()], verbose_name='identifier')),
                ('i18n', modeltrans.fields.TranslationField(fields=('name', 'description_yes', 'description_no'), required_languages=(), virtual_fields=True)),
            ],
            options={
                'verbose_name': 'monitoring quality point',
                'verbose_name_plural': 'monitoring quality points',
                'ordering': ('plan', 'order'),
            },
            bases=(models.Model, aplans.utils.PlanRelatedModel),
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('identifier', aplans.utils.IdentifierField(max_length=50, unique=True, validators=[aplans.utils.IdentifierValidator()], verbose_name='identifier')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('site_url', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator(('http', 'https'))], verbose_name='site URL')),
                ('actions_locked', models.BooleanField(default=False, help_text='Can actions be added and the official metadata edited?', verbose_name='actions locked')),
                ('allow_images_for_actions', models.BooleanField(default=True, help_text='Should custom images for individual actions be allowed', verbose_name='allow images for actions')),
                ('show_admin_link', models.BooleanField(default=False, help_text='Should the public website contain a link to the admin login?', verbose_name='show admin link')),
                ('primary_language', models.CharField(choices=[('fi', 'Finnish'), ('en', 'English'), ('sv', 'Swedish')], default=actions.models.get_default_language, max_length=8)),
                ('other_languages', aplans.utils.ChoiceArrayField(base_field=models.CharField(choices=[('fi', 'Finnish'), ('en', 'English'), ('sv', 'Swedish')], default=actions.models.get_default_language, max_length=8), blank=True, default=list, null=True, size=None)),
                ('accessibility_statement_url', models.URLField(blank=True, null=True, verbose_name='URL to accessibility statement')),
                ('uses_wagtail', models.BooleanField(default=True)),
                ('statuses_updated_manually', models.BooleanField(default=False)),
                ('contact_persons_private', models.BooleanField(default=False, help_text='Set if the contact persons should not be visible in the public UI', verbose_name='Contact persons private')),
                ('hide_action_identifiers', models.BooleanField(default=False, help_text="Set if the plan doesn't have meaningful action identifiers", verbose_name='Hide action identifiers')),
                ('cache_invalidated_at', models.DateTimeField(auto_now=True)),
                ('i18n', modeltrans.fields.TranslationField(fields=['name'], required_languages=(), virtual_fields=True)),
                ('admin_group', models.OneToOneField(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='admin_for_plan', to='auth.group')),
                ('contact_person_group', models.OneToOneField(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='contact_person_for_plan', to='auth.group')),
            ],
            options={
                'verbose_name': 'plan',
                'verbose_name_plural': 'plans',
                'ordering': ('created_at',),
                'get_latest_by': 'created_at',
            },
        ),
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('identifier', aplans.utils.IdentifierField(max_length=50, validators=[aplans.utils.IdentifierValidator()], verbose_name='identifier')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scenarios', to='actions.plan', verbose_name='plan')),
            ],
            options={
                'verbose_name': 'scenario',
                'verbose_name_plural': 'scenarios',
            },
            bases=(models.Model, aplans.utils.PlanRelatedModel),
        ),
        migrations.CreateModel(
            name='PlanDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hostname', models.CharField(db_index=True, max_length=200, unique=True, verbose_name='host name')),
                ('google_site_verification_tag', models.CharField(blank=True, max_length=50, null=True)),
                ('matomo_analytics_url', models.CharField(blank=True, max_length=100, null=True)),
                ('plan', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='domains', to='actions.plan', verbose_name='plan')),
            ],
            options={
                'verbose_name': 'plan domain',
                'verbose_name_plural': 'plan domains',
            },
        ),
    ]
